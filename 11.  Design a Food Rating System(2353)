/*Thought Process
1. map-for food and rating
2. Highest rated cusine-map of cusine ans set of pair rating and cusine
3. map<food, cusine>

T.C=O(N)
*/
class FoodRatings {
public:
    unordered_map<string, string>food_cuisine;
    unordered_map<string, set<pair<int, string>>>cuisine_ratings_food;
    unordered_map<string, int> food_rating;
    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) {
        int n=foods.size();
        for(int i=0; i<n; i++){
            string food=foods[i];
            string cuisine=cuisines[i];
            int rating=ratings[i];

            cuisine_ratings_food[cuisine].insert({-rating, food});
            food_cuisine[food]=cuisine;
            food_rating[food]=rating;
        }
    }
    
    void changeRating(string food, int newRating) {
        string cuisine=food_cuisine[food];
        int oldRating=food_rating[food];
        food_rating[food]=newRating;
        cuisine_ratings_food[cuisine].erase({-oldRating, food}); //LOG(n)
        cuisine_ratings_food[cuisine].insert({-newRating, food}); //LOG(n)
    }
    
    string highestRated(string cuisine) {
        return begin(cuisine_ratings_food[cuisine])->second; //O(1)
    }
};

/**
 * Your FoodRatings object will be instantiated and called as such:
 * FoodRatings* obj = new FoodRatings(foods, cuisines, ratings);
 * obj->changeRating(food,newRating);
 * string param_2 = obj->highestRated(cuisine);
 */
