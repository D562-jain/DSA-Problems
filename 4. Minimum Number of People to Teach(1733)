/*Intution
->(User1(Hindi), User2(English))
->(User1(Hindi), User2(English))
1 approach->User2->Hindi, User3->Hindi
2 approach->User1(English)
sadUsers={User1, User2, User3}
maxTalkedLang=English(2)
3users-2users=1user(user1)
=>sadUsers.lenght()-maxtalkedlang

Story to code
1. Find SadUsers
2. Check most known language among sadUsers
3. sadUsers.length()-mostKnownLanguageCount; 
T.C=O(F*L)*/

class Solution {
public:
    int minimumTeachings(int n, vector<vector<int>>& languages, vector<vector<int>>& friendships) {
        unordered_set<int> sadUsers;
        for(auto &friends: friendships){
            int u=friends[0]-1; //convert this to 0 based indexing
            int v=friends[1]-1;
            unordered_set<int> langSet(begin(languages[u]), end(languages[u]));
            bool canTalk=false;
            for(int lang:languages[v]){
                if(langSet.count(lang)){
                    canTalk=true;
                    break;
                }
            }
            if(!canTalk){
                sadUsers.insert(u);
                sadUsers.insert(v);
            }
        }
        //Find max known language among sad users
        vector<int> language(n+1, 0);
        int mostKnownLang=0;
        for(int user: sadUsers){
            for(int lang: languages[user]){
                language[lang]++;
                mostKnownLang=max(mostKnownLang, language[lang]);
            }
        }
        return sadUsers.size()-mostKnownLang;
    }
};
