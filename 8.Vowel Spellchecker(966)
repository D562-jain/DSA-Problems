/*Thought process
Priority:
->Exact Match
->Case Match
->Vowel Match

Story Points
1. input
->exact set
->lowercase->map:lowercase
->vowelMap->lowercase->vowel:*->map->final word
2.Query
->exact set
->lowercase
->vowel->*->vowelmap
->""

T.C=O(length of entire words in wordlist+queries)
S.C=O(Length of entire words)
*/
class Solution {
public:
    unordered_set<string>exactSet;
    unordered_map<string,string>caseMp;
    unordered_map<string, string>vowelMp;
    string toLower(string &s){
        string result=s;
        for(char &ch:result){
            ch=tolower(ch);
        }
        return result;
    }
    string replaceVowel(string &s){
        string result=s;
        for(char &ch:result){
            if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'){
                ch='*';
            }
        }
        return result;
    }
    string checkForMatch(string &query){
        if(exactSet.count(query)){
            return query;
        }
        //Case error check
        string lowerCase=toLower(query);
        if(caseMp.count(lowerCase)){
            return caseMp[lowerCase];
        }
        //Vowel error check
        string vowelCase=replaceVowel(lowerCase);
        if(vowelMp.count(vowelCase)){
            return vowelMp[vowelCase];
        }
        return "";
    }
    vector<string> spellchecker(vector<string>& wordlist, vector<string>& queries) {
        exactSet.clear();
        caseMp.clear();
        vowelMp.clear();
        for(string word: wordlist){
            exactSet.insert(word);
            string lowerCase=toLower(word);
            if(caseMp.find(lowerCase)==caseMp.end()){
                caseMp[lowerCase]=word;
            }
            string vowelCase=replaceVowel(lowerCase);
            if(vowelMp.find(vowelCase)==vowelMp.end()){
                vowelMp[vowelCase]=word;
            }
        }
        vector<string>result;
        for(string &query: queries){
            result.push_back(checkForMatch(query));
        }
        return result;
    }
};
